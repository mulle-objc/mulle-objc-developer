#! /usr/bin/env bash
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
MULLE_OBJC_DEVELOPER_VERSION=0.9.1

VERSION="${VERSION:-${MULLE_OBJC_DEVELOPER_VERSION}}"
PUBLISHER="${PUBLISHER:-mulle-nat}"
MULLE_OBJC_DEVELOPER_TOOLS="${MULLE_OBJC_DEVELOPER_TOOLS:-mulle-objc-developer}"


usage()
{
   cat <<EOF >&2
usage:
   ${MULLE_EXECUTABLE} [options] [command]

   Options:
      -d <dir>   : use "dir" instead of working directory
      --dev      : add conventional configurations for developers
      --mirror   : cache downloaded git repositories (recommended)
      -f         : overwrite existing files
      -n         : don't actually do anything

   Command:
      check      : check current project
      executable : create a executable project
      library    : create a library project
      version    : print ${MULLE_EXECUTABLE} version
EOF
   exit 1
}


sanity_check()
{
   local library_path

   library_path="`mulle-bootstrap library-path`" 2> /dev/null
   [ -z "${library_path}" -o ! -d "${library_path}" ] && "mulle-bootstrap not in PATH"

   . "${library_path}/mulle-bootstrap-logging.sh"

   ([ -e .CC ]               && log_info ".CC exists")              || log_warning ".CC is missing"
   ([ -e .CXX ]              && log_info ".CXX exists")             || log_warning ".CXX is missing"
   ([ -e .bootstrap ]        && log_info ".bootstrap exists")       || log_warning ".bootstrap is missing"
   ([ -e .bootstrap.local ]  && log_info ".bootstrap.local exists") || log_warning ".bootstrap.local is missing"
   ([ -e src ]               && log_info "./src exists")            || log_warning "./src is missing"
   ([ -e CMakeLists.txt ]    && log_info "CMakeLists.txt exists")   || log_warning "CMakeLists.txt is missing"
}


compiler_setup()
{
   if [ ! -e .CC -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor .CC echo "mulle-clang"
   fi
   if [ ! -e .CXX -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor .CXX echo "mulle-clang"
   fi
}


is_minion_master()
{
   case "`mulle-bootstrap type`" in
      Master|Minion)
         return 0
      ;;
   esac
   return 1
}


bootstrap_setup()
{
   if [ "${FLAG_FORCE}" = "YES" ]
   then
      exekutor rm -rf .bootstrap 2> /dev/null
      exekutor rm -rf .bootstrap.local 2> /dev/null
   fi

   if [ ! -e .bootstrap ]
   then
      exekutor mulle-bootstrap -s init -n
   fi

   # doesn't work when configured as master/minion already
   if is_minion_master
   then
      return
   fi

   if [ -z "`mulle-bootstrap setting -g -r repositories`" -o "${FLAG_FORCE}" = "YES" ]
   then
      exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} setting -g -r repositories "${MULLE_OBJC_CLONE}"
   fi
}


cache_setup()
{
   # doesn't work when configured as master/minion already
   if is_minion_master
   then
      return
   fi

   if [ "${OPTION_MIRROR_CLONES}" = "YES" ]
   then
      case "${UNAME}" in
         darwin)
            exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config -u "git_mirror" "${HOME}/Library/Caches/mulle-bootstrap/git_mirror"
         ;;

         *)
            exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config -u "git_mirror" "${HOME}/.cache/mulle-bootstrap/git_mirror"
         ;;
      esac
   fi
}


developer_setup()
{
   # doesn't work when configured as master/minion already
   if is_minion_master
   then
      return
   fi

   if [ -z "`mulle-bootstrap config symlinks`" -o "${FLAG_FORCE}" = "YES" ]
   then
      exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config -y symlinks
   fi
   if [ -z "`mulle-bootstrap config embedded_symlinks`" -o "${FLAG_FORCE}" = "YES" ]
   then
      exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config -y embedded_symlinks
   fi

   if [ "${OPTION_MULLE_OBJC_DEVELOPER}" = "YES" ]
   then
      if [ -z "`mulle-bootstrap config dont_warn_scripts`" -o "${FLAG_FORCE}" = "YES" ]
      then
         exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config -y dont_warn_scripts
      fi

      if [ -z "`mulle-bootstrap config embedded_symlinks`" -o "${FLAG_FORCE}" = "YES" ]
      then
         exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config -y embedded_symlinks
      fi

      if [ -z "`mulle-bootstrap config search_path`" -o "${FLAG_FORCE}" = "YES" ]
      then
         local search_path

         search_path=""
         if [ -d ../mulle-configuration ]
         then
            directory="`(cd .. ; pwd -P)`"
            search_path="`add_path "${search_path}" "${directory}"`"
         fi

         if [ -d ../MulleObjC-master ]
         then
            directory="`(cd ../MulleObjC-master ; pwd -P)`"
            search_path="`add_path "${search_path}" "${directory}"`"
         fi

         if [ ! -z "${search_path}" ]
         then
            exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config search_path "${search_path}"

            if [ -z "`mulle-bootstrap config override_branch`" -o "${FLAG_FORCE}" = "YES" ]
            then
               exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} config override_branch master
            fi
         fi
      fi
   fi
#   mulle-bootstrap config override_branch -master

   # if [ -z "`mulle-bootstrap config caches_path`" -o "${FLAG_FORCE}" = "YES" ]
   # then
   #    local this
   #    local parent

   #    this="`pwd -P`"
   #    parent="`dirname -- "${this}"`"

   #    if [ "${parent}" != "." ]
   #    then
   #       local caches_path

   #       caches_path="${parent}"
   #       parent="`dirname -- "${parent}"`"

   #       if [ "${parent}" != "." ]
   #       then
   #          caches_path="${caches_path}:${parent}"
   #       fi
   #       exekutor mulle-bootstrap config caches_path "${caches_path}"
   #    fi
   # fi
}


configuration_setup()
{
   # doesn't work when configured as master/minion already
   if is_minion_master
   then
      return
   fi

   if [ -z "`mulle-bootstrap setting -g -r embedded_repositories`" -o "${FLAG_FORCE}" = "YES" ]
   then
      exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} setting -g -r embedded_repositories "${MULLE_CONFIGURATION_CLONE}"
      exekutor mulle-bootstrap ${MULLE_BOOTSTRAP_FLAGS} setting -g -r -a embedded_repositories "${MULLE_TESTS_CLONE}"
   fi
}


common_setup()
{
   bootstrap_setup
   compiler_setup
   cache_setup
   developer_setup
   configuration_setup
}


emit_readme_md()
{
   cat <<EOF
# ${PROJECT_NAME}

This is a [mulle-objc](https://mulle-objc.github.io/) project.


## Install Prequisites

Install the [developer tools](${MULLE_OBJC_REPOSITORIES}/${MULLE_OBJC_DEVELOPER_TOOLS}).


## Use **mulle-build** to build project

\`\`\`
mulle-build --bootstrap
\`\`\`
EOF

   echo "${ADDITIONAL_README}"
}


emit_cmakelists_common_header()
{
   cat <<EOF
cmake_minimum_required( VERSION 3.0)

project( ${PROJECT_NAME})

set( CMAKE_MODULE_PATH
\${CMAKE_MODULE_PATH}
"\${CMAKE_SOURCE_DIR}/mulle-configuration/cmake"
)

set( MULLE_LANGUAGE "ObjC")
if( "\${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  include( Debug)
else()
  include( Release)
endif()

EOF
}


emit_cmakelists_common_footer()
{
   :
}


emit_include_directories()
{
   local nicey

   nicey="`sed 's|/$||' <<< "${FILE_PREFIX}"`"
   if [ ! -z "${nicey}" ]
   then
      cat <<EOF
include_directories(
${nicey}
)

EOF
   fi
}


emit_dependencies_common()
{
   cat <<EOF
include( \${DEPENDENCIES_DIR}/include/MulleObjC/CMakeDependencies.txt)

if( NOT MULLE_OBJC_LIBRARY)
   find_library( MULLE_OBJC_LIBRARY NAMES MulleObjC)
   message(STATUS "MULLE_OBJC_LIBRARY is \${MULLE_OBJC_LIBRARY}")
   set( OBJC_DEPENDENCY_LIBRARIES
\${MULLE_OBJC_LIBRARY}
\${OBJC_DEPENDENCY_LIBRARIES}
CACHE INTERNAL "need to cache this"
)
   set( OBJC_DEPENDENCY_NAMES
MulleObjC
\${OBJC_DEPENDENCY_NAMES}
CACHE INTERNAL "need to cache this too"
)
endif()

message( STATUS "# Included \"${PROJECT_NAME}\" CMakeDependencies.txt")

EOF
}


emit_sources_and_headers_library()
{
   cat <<EOF

set( SOURCES
"${FILE_PREFIX}Foo.m"
"${FILE_PREFIX}MulleObjCLoader+${PROJECT_NAME}.m"
)

set( PUBLIC_HEADERS
"${FILE_PREFIX}Foo.h"
"${FILE_PREFIX}version.h"
)

set( STANDALONE_SOURCES
"${FILE_PREFIX}${PROJECT_NAME}Standalone.m"
)

EOF

   emit_include_directories
}


emit_cmakelists_library()
{
   cat <<EOF

###

include( CMakeSourcesAndHeaders.txt)
include( CMakeDependencies.txt)

###

add_library( "${PROJECT_NAME}"
\${SOURCES}
\${PUBLIC_HEADERS}
\${PRIVATE_HEADERS}
CMakeDependencies.txt
CMakeSourcesAndHeaders.txt
)

add_library( "${PROJECT_NAME}Standalone" SHARED
\${STANDALONE_SOURCES}
)

add_dependencies( "${PROJECT_NAME}Standalone" "${PROJECT_NAME}")

target_link_libraries( "${PROJECT_NAME}Standalone"
\${BEGIN_ALL_LOAD}
${PROJECT_NAME}
\${OBJC_DEPENDENCY_LIBRARIES}
\${C_DEPENDENCY_LIBRARIES}
\${END_ALL_LOAD}
\${OS_SPECIFIC_LIBRARIES}
)

message( STATUS "OBJC_DEPENDENCY_NAMES is \${OBJC_DEPENDENCY_NAMES}")

# runs in build dir
add_custom_command( TARGET "${PROJECT_NAME}Standalone"
   POST_BUILD
   COMMAND \${DEPENDENCIES_DIR}/bin/mulle-objc-create-dependencies-inc -v
           -o \${CMAKE_SOURCE_DIR}/src/dependencies.inc ${PROJECT_NAME}
           \${OBJC_DEPENDENCY_NAMES}
)

set( PUBLIC_HEADERS
\${PUBLIC_HEADERS}
"CMakeDependencies.txt"
"src/dependencies.inc"
)

install( TARGETS "${PROJECT_NAME}" "${PROJECT_NAME}Standalone" DESTINATION "lib")
install( FILES \${PUBLIC_HEADERS}  DESTINATION "include/${PROJECT_NAME}")
install( FILES \${PRIVATE_HEADERS} DESTINATION "include/${PROJECT_NAME}/private")
EOF
}


emit_sources_and_headers_executable()
{
   emit_include_directories

   cat <<EOF
set( SOURCES
${FILE_PREFIX}main.m
)
EOF
}


emit_cmakelists_executable()
{
   cat <<EOF

###

include( CMakeSourcesAndHeaders.txt)
include( CMakeDependencies.txt)

###

add_executable( "${PROJECT_NAME}"
\${SOURCES}
\${PUBLIC_HEADERS}
\${PRIVATE_HEADERS}
CMakeDependencies.txt
CMakeSourcesAndHeaders.txt
)

EOF

   if [ "${OPTION_DYNAMIC_LINKED}" = "YES" ]
   then
      cat <<EOF
target_link_libraries( "${PROJECT_NAME}"
${MULLE_OBJC_LIBRARY_NAME}
\${OS_SPECIFIC_LIBRARIES}
)
EOF
   else
      cat <<EOF
target_link_libraries( "${PROJECT_NAME}"
\${BEGIN_ALL_LOAD}
\${OBJC_DEPENDENCY_LIBRARIES}
\${END_ALL_LOAD}
\${C_DEPENDENCY_LIBRARIES} # for executable outside of all load
\${OS_SPECIFIC_LIBRARIES}
)
EOF
   fi

   cat <<EOF

install( TARGETS "${PROJECT_NAME}" DESTINATION "bin")
EOF
}


demo_version_h()
{
   cat <<EOF
/*
 *  version:  major, minor, patch
 */
#define ${PROJECT_UPCASE_IDENTIFIER}_VERSION  ((0 << 20) | (0 << 8) | 0)


static inline unsigned int    ${PROJECT_IDENTIFIER}_get_version_major( void)
{
   return( ${PROJECT_UPCASE_IDENTIFIER}_VERSION >> 20);
}


static inline unsigned int    ${PROJECT_IDENTIFIER}_get_version_minor( void)
{
   return( (${PROJECT_UPCASE_IDENTIFIER}_VERSION >> 8) & 0xFFF);
}


static inline unsigned int    ${PROJECT_IDENTIFIER}_get_version_patch( void)
{
   return( ${PROJECT_UPCASE_IDENTIFIER}_VERSION & 0xFF);
}

EOF
}


demo_file_h()
{
   cat <<EOF
#import <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_HEADER_NAME}.h>


@interface Foo : NSObject

- (uint32_t) projectVersion;

@end
EOF
}


demo_file_m()
{
   cat <<EOF
#import "Foo.h"
#import "version.h"


@implementation Foo

- (uint32_t) projectVersion;
{
   return( ${PROJECT_UPCASE_IDENTIFIER}_VERSION);
}

@end
EOF
}


demo_loader_h()
{
   cat <<EOF
#import <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_HEADER_NAME}.h>


@interface MulleObjCLoader( ${PROJECT_NAME})
@end
EOF
}


demo_loader_m()
{
   cat <<EOF
#import "MulleObjCLoader+${PROJECT_NAME}.h"


@implementation MulleObjCLoader( ${PROJECT_NAME})

+ (struct _mulle_objc_dependency *) dependencies
{
   static struct _mulle_objc_dependency   dependencies[] =
   {

#include "dependencies.inc"

      { MULLE_OBJC_NO_CLASSID, MULLE_OBJC_NO_CATEGORYID }
   };

   return( dependencies);
}

@end
EOF
}


demo_dependencies_inc()
{
   cat <<EOF
// this file will be replaced with generated contents after the first build
EOF
}


# must be .m
demo_standalone_m()
{
   cat <<EOF
#include <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_STANDALONE_HEADER_NAME}.h>
#include <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_STANDALONE_INC_NAME}.inc>

// that's all folks
EOF
}



demo_main_m()
{
   cat <<EOF
#import <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_HEADER_NAME}.h>
#include "version.h"

EOF

   if [ "${OPTION_DYNAMIC_LINKED}" = "YES" ]
   then
      echo "#define DYNAMIC_LINKED_${UPCASE_MULLE_OBJC_NAME}"
   else
      echo "// #define DYNAMIC_LINKED_${UPCASE_MULLE_OBJC_NAME}"
   fi

   cat <<EOF
#ifndef DYNAMIC_LINKED_${UPCASE_MULLE_OBJC_NAME}

#include <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_STANDALONE_HEADER_NAME}.h>
#include <${MULLE_OBJC_HEADER_NAME}/${MULLE_OBJC_STANDALONE_INC_NAME}.inc>

#endif


int  main( int argc, char *argv[])
{
#if defined( DEBUG) && defined( __MULLE_OBJC__)
   if( mulle_objc_check_universe() != mulle_objc_universe_is_ok)
   {
      extern void   mulle_objc_dotdump_to_tmp( void);

      mulle_objc_dotdump_to_tmp();
      exit( 1);
   }
#endif
   printf( "VfL Bochum 1848\n");
   return( 0);
}
EOF
}


demo_library_files()
{
   if [ ! -e "README.md" -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor README.md emit_readme_md
   fi

   if [ ! -d "src" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
   fi

   if [ ! -e "src/version.h" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/version.h" demo_version_h
   fi

   if [ ! -e "src/Foo.h" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/Foo.h" demo_file_h
   fi

   if [ ! -e "src/Foo.m" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/Foo.m" demo_file_m
   fi

   if [ ! -e "src/${PROJECT_NAME}Standalone.c" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/${PROJECT_NAME}Standalone.m" demo_standalone_m
   fi

   if [ ! -e "src/dependencies.inc" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/dependencies.inc" demo_dependencies_inc
   fi

   if [ ! -e "src/MulleObjCLoader+${PROJECT_NAME}.h" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/MulleObjCLoader+${PROJECT_NAME}.h" demo_loader_h
   fi

   if [ ! -e "src/MulleObjCLoader+${PROJECT_NAME}.m" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/MulleObjCLoader+${PROJECT_NAME}.m" demo_loader_m
   fi
}


demo_executable_files()
{
   if [ ! -e "README.md" -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor README.md emit_readme_md
   fi

   if [ ! -e "src/version.h" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/version.h" demo_version_h
   fi

   if [ ! -e "src/main.m" -o "${FLAG_FORCE}" = "YES" ]
   then
      mkdir_if_missing "src"
      redirect_exekutor "src/main.m" demo_main_m
   fi
}


library_setup()
{
   if [ ! -f "CMakeLists.txt" -o "${FLAG_FORCE}" = "YES" ]
   then
      local text

      text="`
      (
         emit_cmakelists_common_header
         emit_cmakelists_library
         emit_cmakelists_common_footer
      )`"

      redirect_exekutor CMakeLists.txt echo "${text}"
   fi

   if [ ! -f "CMakeSourcesAndHeaders.txt" -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor CMakeSourcesAndHeaders.txt emit_sources_and_headers_library
   fi

   if [ ! -f "CMakeDependencies.txt" -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor CMakeDependencies.txt emit_dependencies_common
   fi

   if [ "${FLAG_OUTPUT_DEMO_FILES}" = "YES" ]
   then
      if [ ! -d src ]
      then
         demo_library_files
      fi
   fi

   common_setup
}


executable_setup()
{
   if [ ! -f "CMakeLists.txt" -o "${FLAG_FORCE}" = "YES" ]
   then
      local text

      text="`
      (
         emit_cmakelists_common_header
         emit_cmakelists_executable
         emit_cmakelists_common_footer
      )`"

      redirect_exekutor CMakeLists.txt echo "${text}"
   fi

   if [ ! -f "CMakeSourcesAndHeaders.txt" -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor CMakeSourcesAndHeaders.txt emit_sources_and_headers_executable
   fi

   if [ ! -f "CMakeDependencies.txt" -o "${FLAG_FORCE}" = "YES" ]
   then
      redirect_exekutor CMakeDependencies.txt emit_dependencies_common
   fi

   if [ "${FLAG_OUTPUT_DEMO_FILES}" = "YES" ]
   then
      demo_executable_files
   fi

   common_setup
}


setup_bootstrap_environment()
{
   local libexec

   libexec="`mulle-bootstrap library-path 2> /dev/null | head -1`"
   if [ -z "${libexec}" ]
   then
      echo "mulle-bootstrap not installed or not in PATH: $PATH" >&2
      exit 1
   fi

   PATH="${libexec}:${PATH}"

   . mulle-bootstrap-logging.sh
   . mulle-bootstrap-functions.sh
   . mulle-bootstrap-local-environment.sh
}


main()
{
   setup_bootstrap_environment

   # technical flags
   local MULLE_FLAG_DONT_DEFER="NO"
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_FOLLOW_SYMLINKS="YES"
   local MULLE_FLAG_LOG_CACHE="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_TRACE_PATHS_FLIP_X="NO"
   local MULLE_TRACE_POSTPONE="NO"
   local MULLE_TRACE_RESOLVER_FLIP_X="NO"
   local MULLE_TRACE_SETTINGS_FLIP_X="NO"

   local FLAG_FORCE="NO"
   local FILE_PREFIX="src/"
   local FLAG_OUTPUT_DEMO_FILES="YES"
   local OPTION_MULLE_OBJC_DEVELOPER="NO"
   local OPTION_DYNAMIC_LINKED="NO"
   local OPTION_MIRROR_CLONES="NO"

   local directory

   directory="."

   #
   # allow these to be set via environment for now
   #
   MULLE_OBJC_NAME="${MULLE_OBJC_NAME:-MulleObjC}"
   UPCASE_MULLE_OBJC_NAME="${UPCASE_MULLE_OBJC_NAME:-MULLE_OBJC}"
   MULLE_OBJC_DEVELOPER_REPOSITORY_NAME="${MULLE_OBJC_DEVELOPER_REPOSITORY_NAME:-${MULLE_OBJC_NAME}}"
   MULLE_OBJC_HEADER_NAME="${MULLE_OBJC_HEADER_NAME:-${MULLE_OBJC_NAME}}"
   MULLE_OBJC_LIBRARY_NAME="${MULLE_OBJC_LIBRARY_NAME:-${MULLE_OBJC_NAME}Standalone}"
   MULLE_OBJC_STANDALONE_HEADER_NAME="${MULLE_OBJC_STANDALONE_HEADER_NAME:-ns_objc_setup}"
   MULLE_OBJC_STANDALONE_INC_NAME="${MULLE_OBJC_STANDALONE_INC_NAME:-ns_objc_standalone}"

   while [ $# -ne 0 ]
   do
      if bootstrap_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -d|--directory)
            shift
            [ $# -eq 0 ] && usage

            directory="$1"
         ;;

         -f|--force)
            FLAG_FORCE="YES"
         ;;

         -n|--dry-run)
            MULLE_FLAG_EXECUTOR_DRY_RUN="YES"
         ;;

         -s|--sparse)
            FILE_PREFIX="# src/"
            FLAG_OUTPUT_DEMO_FILES="NO"
         ;;

         --mirror)
            OPTION_MIRROR_CLONES="YES"
         ;;

         --dev)
            OPTION_MULLE_OBJC_DEVELOPER="YES"
         ;;

         --dynamic-linked)
            OPTION_DYNAMIC_LINKED="YES"
            MULLE_OBJC_LIBRARY_NAME="${MULLE_OBJC_NAME}"
         ;;

         -*)
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   [ $# -eq 0 ] && usage

   bootstrap_setup_trace "${MULLE_TRACE}"

   local dir_name

   case "${directory}" in
      \.)
         dir_name="`basename -- ${PWD}`"
      ;;

      *)
         dir_name="`basename -- ${directory}`"
      ;;
   esac

   PROJECT_NAME="${PROJECT_NAME:-${dir_name}}"
   PROJECT_IDENTIFIER="`echo "${PROJECT_NAME}" | tr '-' '_' | tr '[A-Z]' '[a-z]'`"
   PROJECT_UPCASE_IDENTIFIER="`echo "${PROJECT_IDENTIFIER}" | tr '[a-z]' '[A-Z]'`"
   MULLE_OBJC_REPOSITORIES="${MULLE_OBJC_REPOSITORIES:-https://github.com/${PUBLISHER}}"

   #
   # a bit weird, but written for MulleFoundation and downgraded to
   # MulleObjC
   # There will be a mulle-foundation-init later
   #
   MULLE_OBJC_CLONE="\${MULLE_OBJC_REPOSITORIES:-${MULLE_OBJC_REPOSITORIES}/${MULLE_OBJC_NAME}};;\${MULLE_OBJC_BRANCH:-release}"
   MULLE_CONFIGURATION_CLONE="\${MULLE_OBJC_REPOSITORIES:-${MULLE_OBJC_REPOSITORIES}/mulle-configuration};;\${MULLE_CONFIGURATION_BRANCH:-release}"
   MULLE_TESTS_CLONE="\${MULLE_OBJC_REPOSITORIES:-${MULLE_OBJC_REPOSITORIES}/mulle-tests};;\${MULLE_TESTS_BRANCH:-release}"

   case "${1}" in
      check)
         cd "${directory}" || fail "couldn't cd to \"${directory}\""
         sanity_check
      ;;

      library)
         mkdir_if_missing "${directory}"
         exekutor cd "${directory}" || fail "couldn't cd to \"${directory}\""
         library_setup
         log_info "Your project for $1 \
${C_MAGENTA}${C_BOLD}${PROJECT_NAME}${C_INFO} in \
${C_RESET}${C_BOLD}${directory}${C_INFO} is ready."
         log_info "Build it with:"
         log_info "  ${C_RESET}${C_BOLD}cd \"${directory}\" ; \
mulle-build --bootstrap"
      ;;

      executable)
         mkdir_if_missing "${directory}"
         exekutor cd "${directory}" || fail "couldn't cd to \"${directory}\""
         executable_setup
         log_info "Your project for $1 \
${C_MAGENTA}${C_BOLD}${PROJECT_NAME}${C_INFO} in \
${C_RESET}${C_BOLD}${directory}${C_INFO} is ready."
         log_info "Build and run it with:"
         log_info "  ${C_RESET}${C_BOLD}cd \"${directory}\" ; \
mulle-build --bootstrap; ./build/${PROJECT_NAME}"
      ;;

      version)
         echo "${VERSION}"
         exit 0
      ;;

      *)
         echo "unknown command \"$1\"" >&2
         exit 1
      ;;
   esac
}

# sometimes passed in
if [ -z "${MULLE_EXECUTABLE}" ]
then
   MULLE_EXECUTABLE="`basename -- "$0"`"
   MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE}"
fi

MULLE_ARGUMENTS="$@"
MULLE_EXECUTABLE_PID="$$"
export MULLE_EXECUTABLE_PID

# env | egrep '^MULLE_' | sort >&2

main "$@"
